{"version":3,"sources":["components/Cell.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","e","flipCells","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","createBoard","board","_this$props","rows","cols","i","aux","j","push","Math","floor","random","coord","_this$props2","state","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flip","hasWon","every","row","cell","setState","_this2","_this$state","table","r","key","c","src_components_Cell","concat","bind","defaultProps","App","src_components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.078b9e26.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Cell.css\";\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n  }\n  handleClick = e => {\n    this.props.flipCells();\n  };\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n    return <td className={classes} onClick={this.handleClick} />;\n  }\n}\n\nexport default Cell;\n","import React, { Component } from \"react\";\nimport \"./Board.css\";\nimport Cell from \"./Cell\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  createBoard = () => {\n    let board = [];\n    const { rows, cols } = this.props;\n    for (let i = 0; i < rows; i++) {\n      let aux = [];\n      for (let j = 0; j < cols; j++) {\n        aux.push(Math.floor(Math.random() * 2) ? true : false);\n      }\n      board.push(aux);\n    }\n    return board;\n  };\n  flipCells = coord => {\n    const { rows, cols } = this.props;\n    const board = this.state.board;\n    const [y, x] = coord.split(\"-\").map(Number);\n\n    const flip = (y, x) => {\n      if (x >= 0 && x < cols && y >= 0 && y < rows) {\n        board[y][x] = !board[y][x];\n      }\n    };\n\n    flip(y, x);\n    flip(y, x - 1);\n    flip(y, x + 1);\n    flip(y - 1, x);\n    flip(y + 1, x);\n\n    const hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({ board, hasWon });\n  };\n  render() {\n    const { board, hasWon } = this.state;\n    let table = board.map((r, i) => (\n      <tr key={i}>\n        {r.map((c, j) => (\n          <Cell\n            key={`${i}-${j}`}\n            isLit={c}\n            flipCells={this.flipCells.bind(this, `${i}-${j}`)}\n          />\n        ))}\n      </tr>\n    ));\n    return (\n      <div>\n        {!hasWon ? (\n          <div className=\"Board-Container\">\n            <h1>\n              <span className=\"neon\">Un</span>\n              <span className=\"flux\">lit</span>\n            </h1>\n            <table className=\"Board\">\n              <tbody>{table}</tbody>\n            </table>\n          </div>\n        ) : (\n          <div className=\"Board-Win\">\n            <h1>\n              <span className=\"flux\">You</span>\n              <span className=\"neon\">Win!!!</span>\n            </h1>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  static defaultProps = {\n    rows: 5,\n    cols: 5\n  };\n}\n\nexport default Board;\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board\";\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Board rows={5} cols={5} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}